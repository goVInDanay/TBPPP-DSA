class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        int n = bloomDay.length;
        if((long)n < m * k){
            return -1;
        }
        int ans = -1;
        int start = 1;
        int end = 0;
        for(int i : bloomDay){
            end =  Math.max(i, end);
        }
        while(start <= end){
            int mid = start + (end - start) / 2;
            if(isPossible(bloomDay, k, m, mid)){
                ans = mid;
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
        }
        return ans;
    }
    private boolean isPossible(int arr[], int k, int m, int mid){
        int i = 0;
        int total = 0;
        int n = arr.length;
        while(i < n){
            int count = 0;
            while(i < n && count < k && arr[i] <= mid){
                i++;
                count++;
            }
            if(count == k){
                total++;
                i--;
            }
            if(total >= m){
                return true;
            }
            i++;
        }
        return false;
    }
}
