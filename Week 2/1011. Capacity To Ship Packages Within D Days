class Solution {
    int ans=Integer.MAX_VALUE;
    public int shipWithinDays(int[] weights, int days) {
        int sum=0;
        for(int i=0;i<weights.length;i++)
        sum+=weights[i];
        ans=Integer.MAX_VALUE;
        int min=1;
        int max=sum;
        find(min,max,weights,days);
        return ans;
    }
    public void find(int start,int end,int weights[],int days){
        int capacity=start+(end-start)/2;
        int d=daysRequired(weights,capacity);
        if(d>days || d==-1){
            if(capacity+1<=end)
            find(capacity+1,end,weights,days);
        }
        else{
            ans=Math.min(ans,capacity);
            if(start<=capacity-1){
                find(start,capacity-1,weights,days);
            }
        }
    }
    public int daysRequired(int weights[],int capacity){
        int days=0;
        int sum=0;
        for(int i=0;i<weights.length;i++){
            if(weights[i]>capacity)
            return -1;
            if(sum+weights[i]<capacity)
            sum+=weights[i];
            else if(sum+weights[i]==capacity){
                sum=0;
                days++;
            }
            else{
                days++;
                sum=0;
                sum+=weights[i];
            }
            if(i==weights.length-1 && sum<capacity && sum>0)
            days++;
        }
        return days;
    }
}
